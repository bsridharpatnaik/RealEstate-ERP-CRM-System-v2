use galaxyheights; -- suncitynx,kalpavrish,riddhisiddhi,smartcity,galaxyheights;

-- All Inventory --
CREATE OR replace VIEW all_inventory AS
SELECT
		-- convert(func_inc_var_session(),char) AS id,
        row_number() over (ORDER BY tx.date desc,tx.type desc,tx.keyid desc) as id,
		tx.*, 
		p.Product_name,
        p.measurementunit,
         c.name, 
         c.mobileno, 
         c.emailid, 
         c.contacttype, 
         w.warehouse_id, 
         w.warehousename 
  FROM   (SELECT 'Inward'                         AS type, 
				ii.inwardid as keyid ,
				ioe.entryid as entryid,
                 Date_format(ii.DATE, "%Y-%m-%d") AS date, 
                 ii.contactid                    AS contactid, 
                 ii.warehouse_id                  AS warehouseid, 
                 ioe.Productid                   AS Productid, 
                 ioe.quantity, 
                 ioe.closingstock, 
                 ioe.creationDate, 
                 ioe.lastModifiedDate 
          FROM   inward_inventory ii 
                 inner join inwardinventory_entry iie 
                         ON ii.inwardid = iie.inwardid 
                 inner join inward_outward_entries ioe 
                         ON iie.entryid = ioe.entryid 
          WHERE  ii.is_deleted = 0 
          UNION ALL 
          SELECT 'Outward'                        AS type, 
                  oi.outwardid as keyid, 
                  ioe.entryid as entryid,
                 Date_format(oi.DATE, "%Y-%m-%d") AS date, 
                 oi.contactid                    AS contactid, 
                 oi.warehouse_id                  AS warehouseid, 
                 ioe.Productid                   AS Productid, 
                 ioe.quantity, 
                 ioe.closingstock, 
                 ioe.creationDate, 
                 ioe.lastModifiedDate 
          FROM   outward_inventory oi 
                 inner join outwardinventory_entry oie 
                         ON oi.outwardid = oie.outwardid 
                 inner join inward_outward_entries ioe 
                         ON oie.entryid = ioe.entryid 
          WHERE  oi.is_deleted = 0 
          UNION ALL 
          SELECT 'Lost-Damaged'                    AS type, 
                lostdamagedid as keyid, 
                lostdamagedid as entryid,
                 Date_format(ldi.DATE, "%Y-%m-%d") AS date, 
                 ''                                AS contactid, 
                 ldi.warehousename                AS warehouseid, 
                 ldi.Productid                    AS Productid, 
                 ldi.quantity, 
                 ldi.closingstock, 
                 ldi.creationDate, 
                 ldi.lastModifiedDate 
          FROM   lost_damaged_inventory ldi
			where ldi.is_deleted = 0) AS tx 
         left join contacts c 
                ON c.contactid = tx.contactid 
         inner join Warehouse w 
                 ON w.warehouse_id = tx.warehouseid 
		inner join Product p on p.Productid = tx.Productid
 ORDER  BY tx.date desc,tx.type desc,tx.keyid desc;
  
  -- --------- Stock Verification ------------
  create or replace view stock_verification as
SELECT inw.inventory, 
       ROUND(total_inward,2)                                     AS 'total_inward', 
       ROUND(total_outward  ,2)                                  AS 'total_outward', 
       ROUND(current_stock ,2)                                   AS 'current_stock', 
       ROUND(total_inward - ( total_outward + current_stock ),2) AS 
       'diff_in_Stock' 
FROM   (SELECT p.product_name AS inventory, 
               Sum(quantity)  AS total_inward 
        FROM   inward_inventory ii 
               INNER JOIN inwardinventory_entry iie 
                       ON iie.inwardid = ii.inwardid 
               INNER JOIN inward_outward_entries ioe 
                       ON ioe.entryid = iie.entryid 
               INNER JOIN Product p 
                       ON p.productid = ioe.productid 
        WHERE  ii.is_deleted = 0 
        GROUP  BY p.product_name) AS inw 
       INNER JOIN (SELECT p.product_name AS inventory, 
                          Sum(quantity)  AS total_outward 
                   FROM   outward_inventory oi 
                          INNER JOIN outwardinventory_entry oie 
                                  ON oie.outwardid = oi.outwardid 
                          INNER JOIN inward_outward_entries ioe 
                                  ON ioe.entryid = oie.entryid 
                          INNER JOIN Product p 
                                  ON p.productid = ioe.productid 
                   WHERE  oi.is_deleted = 0 
                   GROUP  BY p.product_name) AS outw 
               ON outw.inventory = inw.inventory 
       INNER JOIN (SELECT p.product_name          AS inventory, 
                          Sum(s.quantityinhand) AS current_stock 
                   FROM   Stock s 
                          INNER JOIN Product p 
                                  ON p.productid = s.productid 
                   GROUP  BY p.product_name) AS stock 
               ON inw.inventory = stock.inventory WHERE ROUND(total_inward - ( total_outward + current_stock ),2)!=0; 